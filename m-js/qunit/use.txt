l   QUnit框架
a)        简介

QUnit是jQuery团队开发的JavaScript单元测试工具，功能强大且使用简单。目前所有的JQuery代码都使用QUnit进行测试，原生的JavaScript也可以使用QUnit。

最初，John Resig将QUnit设计为jQuery的一部分。2008年，QUnit才有了自己的名字、主页和API文档，也开始允许其他人用它来做单元测试。但当时QUnit还是基于jQuery的。直到2009年，QUnit才可以完全的独立运行。
b)       优点

使用起来非常方便，有漂亮的外观和完整的测试功能（包括异步测试）；

非常简单，容易上手，目前公开的API只有19个；

不需要依赖其它任何软件包或框架，只要能运行JS的地方就可以，QUnit本身只有一个JS文件和CSS文件，当然如果需要可以和jQuery等其它框架集成；

不仅支持在浏览器中测试，还支持在Rhino和node.js等后端测试。
c)        不足

对自动化支持不好，很难和Ant、Maven或自动构建等工具集成，主要用在浏览器中进行测试。
d)       API

QUnit所有的API可以分为三类：Setup，Assertions，Asynchronous Testing，下面就分别对这些API做些介绍：

Setup:

test( name, [expected], testFun )   代表QUnit中的一个测试

name：要测试的名称，比如“加法函数”或“add”等

expected：可选参数，用来表示该测试函数的断言的数量，是个正整数

testFun：一个函数，所有的测试代码都应该包括在该函数里，通常这是一个匿名函数。

例：

test(“add function”, 1, function() {
    equal(add(1, 2), 3);
});

asyncTest( name, [expected], testFun )   代表QUnit中的一个异步测试，参数同test

expect( amount )   用在测试函数中，用于声明测试断言的数量，这个函数和test中的expected参数的作用是一样的。主要作用就是检查你声明的个数和你写的断言的实际个数是否一致。

module( name, [lifecycle] )   主要用于测试函数的分组，一个module函数为一个分组，比如module(“validate”)表示后面的测试用例都是validate相关的代码，或者module(“common.js”)，表明后面的测试用例都是common.js里面的代码。一个测试文件可以写多个module。

name：分组或者模块的名称

lifecycle：可选参数，它是一个对象，可以设置setup和teardown回调函数

例：

module(“common.js”, 
    {
        setup:function(){},
        teardown: function() {} 
    }
);

setup：在module开始之前执行，可以为该module下面的测试代码做一些准备工作

teardown：将会在该module的所有测试代码执行后执行，比如做一些清理还原工作等。

QUnit.init( )   用于初始化QUnit测试框架，通常这个函数是不需要我们手工调用的。

QUnit.reset( )   重设函数，通常是在每个test函数执行后由QUnit自己调用来重设整个QUnit测试环境，当然必要时我们自己也可以调用它来复原，不常用。

 

Assertions:

ok( state, [message] )   断言。state值为true时表示通过，否则失败。

equal( actual, expected, [message] )   比较参数actual和expected是否相等，相当于 ==

notEqual( actual, expected, [message] )   比较两个参数是否不相等，相当于 !=

deepEqual( actual, expected, [message] )   主要用于数组和对象等类型的值是否相等，会递归遍历它们所包含的值是否相等。

notDeepEqual( actual, expected, [message] )   主要用于数组和对象等类型的值是否不相等，会递归遍历它们所包含的值是否不相等。

strictEqual( actual, expected, [message] )   比较两个参数是否严格相等，相当于 ===

notStrictEqual( actual, expected, [message] )   比较两个参数是否不严格相等，相当于 !==

throws( block, expected, [message] )   测试block函数是否抛出一个异常，抛出则通过，不抛则失败。

block：我们要测试的函数

expected：可选参数，是一个类型，用来验证第一个函数抛出的异常是否是我们预期的类型。

例：

function CustomError( message ) {
    this.message = message;
}

CustomError.prototype.toString = function() {
    return this.message;
};
throws(
    function() {
        throw new CustomError(“some error description”);
    },
    CustomError,
    "raised error is an instance of CustomError"
);

 

Asynchronous Testing:

stop( [increment] )   停止测试的运行，用于异步测试。在异步测试时一般先把QUnit的test runner停下来。

increment：增加停止的时间。

start( [decrement] )   当异步调用成功后就应该把停止的test runner启动起来让它接着往前跑

decrement：用来减少停止的时间。

例：

test( "a test", function() {
    stop();
    var result = null;
    $.ajax(
        url,
        {},
        function(data){
            result = data;
        }
    );
    setTimeout(function() {
        equals(result, "success" );
        start();
    }, 150 );
});

 
e)        使用

test.html

导入qunit.css，qunit.js

依次导入被测试文件src.js和测试文件test.js

src.js里是我们要测试的一些函数

function example(a,b){
	return a + b;
}

test.js里放我们的测试

test( "hello test", function() {
ok( 1 == "1", "Passed!" );
});

打开test.html，显示：

<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>QUnit Example</title>
<link rel="stylesheet" href="qunit-1.12.0.css">
</head>
<body>
<div id="qunit"></div>
<div id="qunit-fixture"></div>
<script src="qunit-1.12.0.js"></script>
<script src="tests.js"></script>
</body>
</html>

如果期望值与函数执行的结果不一致，会报错：

test.js

test.html显示：

期望值与结果不符，测试不通过。

与浏览器自动化测试工具集成的接口：

都是QUnit自动调用的一些函数，一般不用改，也可以自己定制

QUnit.log(Function({ result, actual, expected, message }))   这个接口会在每个断言执行后被自动调用

result：断言是否通过

message：断言里的message参数

例：

QUnit.log(function(details){
	alert(“Log: ” + details.result + “ ” + details.message);
})

QUnit.testStart(Function({ name }))   在每个测试函数执行前被自动调用

name：测试函数中的name参数值

QUnit.testDone(Function({ name, failed, passed, total }))   在每个测试函数结束后执行被自动调用

name：同上

failed：指失败断言的个数

passed：指成功断言的个数

total：所有断言的个数

QUnit.moduleStart(Function({ name }))   在每个module所有的测试代码执行前被自动调用

name：module函数中name参数的值

QUnit.moduleDone(Function({ name, failed, passed, total }))   在每个module所有的测试代码执行完之后被自动执行

failed：指失败断言的个数

passed：指成功断言的个数

total：指所有断言的个数

QUnit.begin(Function())   在所有的测试代码调用之前运行

QUnit.done(Function({ failed, passed, total, runtime }))   在所有的测试代码调用之后运行

failed：指失败断言的个数

passed：指成功断言的个数

total：指所有断言的个数

runtime：所有代码的执行时间

 
API及下载：http://api.qunitjs.com/

参考：http://www.weakweb.com/articles/255.html

http://www.iteye.com/topic/981253